{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport authActions from './auth-actions';\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com'; // Обьект токена\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  }\n\n}; // Операция регистрации юзера\n\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest());\n\n  try {\n    const {\n      data\n    } = await axios.post('/users/signup', credentials);\n    token.set(data.token);\n    dispatch(authActions.registerSuccess(data));\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n    toast.error(error.message);\n  }\n}; // Операция авторизации юзера\n\n\nconst logIn = credentials => async dispatch => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const {\n      data\n    } = await axios.post('/users/login', credentials);\n    token.set(data.token);\n    dispatch(authActions.loginSuccess(data));\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n    toast.error(error.message);\n  }\n}; // Операция выхода из профиля\n\n\nconst logOut = () => async dispatch => {\n  dispatch(authActions.logoutRequest());\n\n  try {\n    await axios.post('/users/logout');\n    token.unset();\n    dispatch(authActions.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n    toast.error(error.message);\n  }\n}; // Операция получения текущего пользователя (проверяем локальное хранилище через персист)\n\n\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: {\n      token: persistedToken\n    }\n  } = getState();\n  if (!persistedToken) return;\n  token.set(persistedToken);\n  dispatch(authActions.getCurrentUserRequest());\n\n  try {\n    const {\n      data\n    } = await axios.get('/users/current');\n    dispatch(authActions.getCurrentUserSuccess(data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n    toast.error(error.message);\n  }\n}; // eslint-disable-next-line\n\n\nexport default {\n  register,\n  logIn,\n  logOut,\n  getCurrentUser\n};","map":{"version":3,"sources":["/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-08-phonebook/src/redux/auth/auth-operations.js"],"names":["axios","toast","authActions","defaults","baseURL","token","set","headers","common","Authorization","unset","register","credentials","dispatch","registerRequest","data","post","registerSuccess","error","registerError","message","logIn","loginRequest","loginSuccess","loginError","logOut","logoutRequest","logoutSuccess","logoutError","getCurrentUser","getState","auth","persistedToken","getCurrentUserRequest","get","getCurrentUserSuccess","getCurrentUserError"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { toast } from 'react-toastify';\n\nimport authActions from './auth-actions';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\n// Обьект токена\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\n// Операция регистрации юзера\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest());\n\n  try {\n    const { data } = await axios.post('/users/signup', credentials);\n\n    token.set(data.token);\n    dispatch(authActions.registerSuccess(data));\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n    toast.error(error.message);\n  }\n};\n\n// Операция авторизации юзера\nconst logIn = credentials => async dispatch => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const { data } = await axios.post('/users/login', credentials);\n\n    token.set(data.token);\n    dispatch(authActions.loginSuccess(data));\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n    toast.error(error.message);\n  }\n};\n\n// Операция выхода из профиля\nconst logOut = () => async dispatch => {\n  dispatch(authActions.logoutRequest());\n\n  try {\n    await axios.post('/users/logout');\n\n    token.unset();\n    dispatch(authActions.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n    toast.error(error.message);\n  }\n};\n\n// Операция получения текущего пользователя (проверяем локальное хранилище через персист)\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n\n  if (!persistedToken) return;\n\n  token.set(persistedToken);\n\n  dispatch(authActions.getCurrentUserRequest());\n\n  try {\n    const { data } = await axios.get('/users/current');\n\n    dispatch(authActions.getCurrentUserSuccess(data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n    toast.error(error.message);\n  }\n};\n\n// eslint-disable-next-line\nexport default { register, logIn, logOut, getCurrentUser };\n"]},"metadata":{},"sourceType":"module"}