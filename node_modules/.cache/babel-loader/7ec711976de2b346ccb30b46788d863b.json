{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-08-phonebook/src/components/PublicRoute.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { authSelectors } from \"../redux/auth\";\n/**\n * - Если маршрут ограниченный, и юзер залогинен, рендерит редирект на redirectTo\n * - В противном случае рендерит компонент\n *\n */\n\nexport default function PublicRoute({\n  children,\n  restricted = false,\n  redirectTo = \"/\",\n  ...routeProps\n}) {\n  _s();\n\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\n  const shouldRedirect = isLoggedIn && restricted;\n  return /*#__PURE__*/_jsxDEV(Route, { ...routeProps,\n    children: shouldRedirect ? /*#__PURE__*/_jsxDEV(Redirect, {\n      to: redirectTo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 25\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PublicRoute, \"wwozkPYuXjHFfszlt2mcSB3o0is=\", false, function () {\n  return [useSelector];\n});\n\n_c = PublicRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PublicRoute\");","map":{"version":3,"sources":["/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-08-phonebook/src/components/PublicRoute.js"],"names":["useSelector","Route","Redirect","authSelectors","PublicRoute","children","restricted","redirectTo","routeProps","isLoggedIn","getIsLoggedIn","shouldRedirect"],"mappings":";;;;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,aAAT,QAA8B,eAA9B;AAEA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,WAAT,CAAqB;AAClCC,EAAAA,QADkC;AAElCC,EAAAA,UAAU,GAAG,KAFqB;AAGlCC,EAAAA,UAAU,GAAG,GAHqB;AAIlC,KAAGC;AAJ+B,CAArB,EAKZ;AAAA;;AACD,QAAMC,UAAU,GAAGT,WAAW,CAACG,aAAa,CAACO,aAAf,CAA9B;AACA,QAAMC,cAAc,GAAGF,UAAU,IAAIH,UAArC;AACA,sBACE,QAAC,KAAD,OAAWE,UAAX;AAAA,cACGG,cAAc,gBAAG,QAAC,QAAD;AAAU,MAAA,EAAE,EAAEJ;AAAd;AAAA;AAAA;AAAA;AAAA,YAAH,GAAkCF;AADnD;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAbuBD,W;UAMHJ,W;;;KANGI,W","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { authSelectors } from \"../redux/auth\";\n\n/**\n * - Если маршрут ограниченный, и юзер залогинен, рендерит редирект на redirectTo\n * - В противном случае рендерит компонент\n *\n */\n\nexport default function PublicRoute({\n  children,\n  restricted = false,\n  redirectTo = \"/\",\n  ...routeProps\n}) {\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\n  const shouldRedirect = isLoggedIn && restricted;\n  return (\n    <Route {...routeProps}>\n      {shouldRedirect ? <Redirect to={redirectTo} /> : children}\n    </Route>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}