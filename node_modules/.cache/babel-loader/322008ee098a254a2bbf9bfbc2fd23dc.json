{"ast":null,"code":"import { combineReducers, createReducer } from '@reduxjs/toolkit';\nimport authActions from './auth-actions';\nconst initialUserState = {\n  name: null,\n  email: null\n}; // Редюсер для регистрации, авторизации и выхода из профиля\n\nconst user = createReducer(initialUserState, {\n  [authActions.registerSuccess]: (_, {\n    payload\n  }) => payload.user,\n  [authActions.loginSuccess]: (_, {\n    payload\n  }) => payload.user,\n  [authActions.logoutSuccess]: () => initialUserState,\n  [authActions.getCurrentUserSuccess]: (_, {\n    payload\n  }) => payload\n}); // Редюсер для токенов\n\nconst token = createReducer(null, {\n  [authActions.registerSuccess]: (_, {\n    payload\n  }) => payload.token,\n  [authActions.loginSuccess]: (_, {\n    payload\n  }) => payload.token,\n  [authActions.logoutSuccess]: () => null\n}); // Редюсер для индикации авторизации\n\nconst isAuthenticated = createReducer(false, {\n  [authActions.registerSuccess]: () => true,\n  [authActions.loginSuccess]: () => true,\n  [authActions.getCurrentUserSuccess]: () => true,\n  [authActions.registerError]: () => false,\n  [authActions.loginError]: () => false,\n  [authActions.getCurrentUserError]: () => false,\n  [authActions.logoutSuccess]: () => false\n}); // Обработку ошибок можно абстрагировать\n// const setError = (_, { payload }) => payload;\n// Редюсер для обработки ошибок\n\nconst error = createReducer(null, {\n  [authActions.registerError]: (_, {\n    payload\n  }) => payload,\n  [authActions.loginError]: (_, {\n    payload\n  }) => payload,\n  [authActions.logoutError]: (_, {\n    payload\n  }) => payload,\n  [authActions.getCurrentUserError]: (_, {\n    payload\n  }) => payload\n});\nexport default combineReducers({\n  user,\n  token,\n  isAuthenticated,\n  error\n});","map":{"version":3,"sources":["/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-08-phonebook/src/redux/auth/auth-reducer.js"],"names":["combineReducers","createReducer","authActions","initialUserState","name","email","user","registerSuccess","_","payload","loginSuccess","logoutSuccess","getCurrentUserSuccess","token","isAuthenticated","registerError","loginError","getCurrentUserError","error","logoutError"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,kBAA/C;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,IAAI,EAAE,IADiB;AAEvBC,EAAAA,KAAK,EAAE;AAFgB,CAAzB,C,CAKA;;AACA,MAAMC,IAAI,GAAGL,aAAa,CAACE,gBAAD,EAAmB;AAC3C,GAACD,WAAW,CAACK,eAAb,GAA+B,CAACC,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OAAO,CAACH,IADhB;AAE3C,GAACJ,WAAW,CAACQ,YAAb,GAA4B,CAACF,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OAAO,CAACH,IAFb;AAG3C,GAACJ,WAAW,CAACS,aAAb,GAA6B,MAAMR,gBAHQ;AAI3C,GAACD,WAAW,CAACU,qBAAb,GAAqC,CAACJ,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA;AAJd,CAAnB,CAA1B,C,CAOA;;AACA,MAAMI,KAAK,GAAGZ,aAAa,CAAC,IAAD,EAAO;AAChC,GAACC,WAAW,CAACK,eAAb,GAA+B,CAACC,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OAAO,CAACI,KAD3B;AAEhC,GAACX,WAAW,CAACQ,YAAb,GAA4B,CAACF,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OAAO,CAACI,KAFxB;AAGhC,GAACX,WAAW,CAACS,aAAb,GAA6B,MAAM;AAHH,CAAP,CAA3B,C,CAMA;;AACA,MAAMG,eAAe,GAAGb,aAAa,CAAC,KAAD,EAAQ;AAC3C,GAACC,WAAW,CAACK,eAAb,GAA+B,MAAM,IADM;AAE3C,GAACL,WAAW,CAACQ,YAAb,GAA4B,MAAM,IAFS;AAG3C,GAACR,WAAW,CAACU,qBAAb,GAAqC,MAAM,IAHA;AAK3C,GAACV,WAAW,CAACa,aAAb,GAA6B,MAAM,KALQ;AAM3C,GAACb,WAAW,CAACc,UAAb,GAA0B,MAAM,KANW;AAO3C,GAACd,WAAW,CAACe,mBAAb,GAAmC,MAAM,KAPE;AAS3C,GAACf,WAAW,CAACS,aAAb,GAA6B,MAAM;AATQ,CAAR,CAArC,C,CAYA;AACA;AAEA;;AACA,MAAMO,KAAK,GAAGjB,aAAa,CAAC,IAAD,EAAO;AAChC,GAACC,WAAW,CAACa,aAAb,GAA6B,CAACP,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OADjB;AAEhC,GAACP,WAAW,CAACc,UAAb,GAA0B,CAACR,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OAFd;AAGhC,GAACP,WAAW,CAACiB,WAAb,GAA2B,CAACX,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OAHf;AAIhC,GAACP,WAAW,CAACe,mBAAb,GAAmC,CAACT,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA;AAJvB,CAAP,CAA3B;AAOA,eAAeT,eAAe,CAAC;AAC7BM,EAAAA,IAD6B;AAE7BO,EAAAA,KAF6B;AAG7BC,EAAAA,eAH6B;AAI7BI,EAAAA;AAJ6B,CAAD,CAA9B","sourcesContent":["import { combineReducers, createReducer } from '@reduxjs/toolkit';\nimport authActions from './auth-actions';\n\nconst initialUserState = {\n  name: null,\n  email: null,\n};\n\n// Редюсер для регистрации, авторизации и выхода из профиля\nconst user = createReducer(initialUserState, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\n  [authActions.logoutSuccess]: () => initialUserState,\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\n});\n\n// Редюсер для токенов\nconst token = createReducer(null, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\n  [authActions.logoutSuccess]: () => null,\n});\n\n// Редюсер для индикации авторизации\nconst isAuthenticated = createReducer(false, {\n  [authActions.registerSuccess]: () => true,\n  [authActions.loginSuccess]: () => true,\n  [authActions.getCurrentUserSuccess]: () => true,\n\n  [authActions.registerError]: () => false,\n  [authActions.loginError]: () => false,\n  [authActions.getCurrentUserError]: () => false,\n\n  [authActions.logoutSuccess]: () => false,\n});\n\n// Обработку ошибок можно абстрагировать\n// const setError = (_, { payload }) => payload;\n\n// Редюсер для обработки ошибок\nconst error = createReducer(null, {\n  [authActions.registerError]: (_, { payload }) => payload,\n  [authActions.loginError]: (_, { payload }) => payload,\n  [authActions.logoutError]: (_, { payload }) => payload,\n  [authActions.getCurrentUserError]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  user,\n  token,\n  isAuthenticated,\n  error,\n});\n"]},"metadata":{},"sourceType":"module"}